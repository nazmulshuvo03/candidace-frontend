import React, { useCallback } from 'react'
import { Stack, Button, TextInput, TextArea } from '@sanity/ui'
import { useFormValue } from 'sanity'
import { set, unset } from 'sanity'

export function SEOTitleInput(props) {
    const { onChange, value = '', elementProps } = props

    // Use useFormValue to access other form fields
    const title = useFormValue(['title'])

    // Auto-generate SEO title based on main title
    const handleAutoGenerate = useCallback(() => {
        const autoGeneratedTitle = title
            ? `${title} | Candidace`
            : ''

        onChange(autoGeneratedTitle ? set(autoGeneratedTitle) : unset())
    }, [onChange, title])

    const handleChange = useCallback(
        (event) => onChange(
            event.currentTarget.value ?
                set(event.currentTarget.value) :
                unset()
        ),
        [onChange]
    )

    return (
        <Stack space={3}>
            {/* <Flex align="center" gap={2} style={{ width: '100%' }}>  */}
            <TextInput
                {...elementProps}
                onChange={handleChange}
                value={value}
                style={{ width: '100% !important' }}
            />
            <div style={{ fontSize: '0.75rem', color: 'gray' }}>
                Characters: {value?.length || 0}/60
            </div>
            <Button
                type="button"
                tone="primary"
                onClick={handleAutoGenerate}
                text="Generate"
            />
            {/* </Flex> */}
        </Stack>
    )
}

export function SEODescriptionInput(props) {
    const { onChange, value = '', elementProps } = props

    // Use useFormValue to access other form fields
    const smallDescription = useFormValue(['smallDescription'])

    // Auto-generate SEO description based on small description
    const handleAutoGenerate = useCallback(() => {
        const autoGeneratedDesc = smallDescription
            ? smallDescription.slice(0, 160)
            : ''

        onChange(autoGeneratedDesc ? set(autoGeneratedDesc) : unset())
    }, [onChange, smallDescription])

    const handleChange = useCallback(
        (event) => onChange(
            event.currentTarget.value ?
                set(event.currentTarget.value) :
                unset()
        ),
        [onChange]
    )

    return (
        <Stack space={3}>
            {/* <Flex align="center" gap={2} style={{ width: '100%' }}> */}
            <TextArea
                {...elementProps}
                onChange={handleChange}
                value={value}
                style={{ width: '100%' }}
                rows={4}
            />
            {/* <TextInput
                {...elementProps}
                onChange={handleChange}
                value={value}
                multiline
            /> */}
            <div style={{ fontSize: '0.75rem', color: 'gray' }}>
                Characters: {value?.length || 0}/160
            </div>
            <Button
                type="button"
                tone="primary"
                onClick={handleAutoGenerate}
                text="Generate"
            />
            {/* </Flex> */}
        </Stack>
    )
}